package reproductorExpandible;

import elementos_de_control.Archivo_Jalar_Pegar;
import elementos_de_control.Archivo_Jalar_Pegar.Ejecutador;
import elementos_de_control.Direcciones;
import elementos_de_control.NodoDoble;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import reproductor.ReproductorExcepcion;

/**
 *
 * @author JONATHAN
 */
public class Tabla extends javax.swing.JFrame{

    private static DefaultTableModel miModelo;
    public String[][] data = {};
    int Contador_de_celda = 0;
    public static int eliminados = 0;
    Object rutaTabla;
    static Direcciones Direccion;
    GUIReproductor abc;

    static JTable getMiTabla() {
        return Tabla;
    }

    public static DefaultTableModel getMiModelo() {
        return miModelo;
    }

    /** Creates new form Tabla */
    public Tabla(GUIReproductor abc) {
        initComponents();
        setLocation(400, 400);
        setSize(445, 180);
        miModelo = new DefaultTableModel(data, new String[]{"Lista de Reproduccion", "Ruta"}){

            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        Tabla.setModel(miModelo);
        jScrollPane1.setViewportView(Tabla);
        this.abc = abc;

        new Archivo_Jalar_Pegar(this, new Ejecutador(){

            public void filesDropped(File[] files) {
                for (int i = 0; i < files.length; i++) {
                    try {
                        if (files[i].isFile())//Verificar que es un archivo y no una carpeta
                        {
                            String[] extencion_archivo = {".mp3", ".wav", ".ogg", ".flac"};
                            String[] extencion_lista = {".rep", ".m3u"};
                            if (Validaciones(files, extencion_archivo)) {
                                Enviar(files[i].getName(), new File(files[i].getPath()));
                            }
                            else if (Validaciones(files, extencion_lista)) {
                                Traer_Lista(files[i]);
                            }
                        }

                    } // end try
                    catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }   // end for: through each dropped file
            }   // end filesDropped

            private boolean Validaciones(File[] files, String[] extenciones) {
                boolean estado = false;
                for (int i = 0; i < files.length; i++) {
                    for (int j = 0; j < extenciones.length; j++)//Comparador interno falto implementar
                    {
                        //corrige el bug que evitava agregar otro archivo q no sea mp3
                        estado = estado || files[i].getName().contains(extenciones[j]);
                    }
                }
                return estado;
            }
        }); // end FileDrop.Listener
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabla.setDragEnabled(true);
        Tabla.setDropMode(javax.swing.DropMode.ON_OR_INSERT_ROWS);
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMousePressed
        Contador_de_celda = getMiTabla().getSelectedRow();
        //System.out.println("orden " + Contador_de_celda);//Indica el lugar de la fila seleccionada el Contador_de_celda
        rutaTabla = getMiTabla().getValueAt(Contador_de_celda, 1);
        //System.out.println("Ruta " + rutaTabla);//Nombre de la celda
        //String uno=getMiTabla().getColumnName(Contador_de_celda);//Entrega nombre d columna
        //System.out.println("aparecio "+uno);
        if (evt.getClickCount() == 2) {
            //System.out.println(evt.getClickCount() + " archivo " + rutaTabla + " ruta " + Contador_de_celda);
            Libreria.Pista = Contador_de_celda;
            Reproduce(rutaTabla);
        }

}//GEN-LAST:event_TablaMousePressed
    public static void IngresaDatos(String nombre, File file) {
        Direccion = new Direcciones();
        Direccion.setDireccion(file);
        Direccion.setNombre(nombre);
    }

    public static void Traer_Lista(File file) {
        FileReader LeerArchivo = null;
        BufferedReader Temporal_memoria = null;
        try {
            LeerArchivo = new FileReader(file);
            Temporal_memoria = new BufferedReader(LeerArchivo);

            // Lectura del fichero
            String linea;
            File actual;
            while ((linea = Temporal_memoria.readLine()) != null) {
                if (linea.contains("#EXT") == false)//Evita leer metadata de winamp
                {
                    actual = new File(linea);
                    String name = actual.getName();
                    Enviar(name, actual);
                }
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Cargando Archivo!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void Enviar(String nombre, File archivo) {
        IngresaDatos(nombre, archivo);
        if (GUIReproductor.noreproducible) {
            try {
                Libreria.loadFile(archivo.toString());
            }
            catch (ReproductorExcepcion ex) {
                BuscarIrreproducibles();
            }
        }
        if (GUIReproductor.duplicado) {
            NodoDoble aux = GUIReproductor.ldco.busca(archivo);
            if (aux == null) {
                GUIReproductor.ldco.agrega(Direccion);
                Object[] datos = {Direccion.getNombre(), Direccion.getDireccion()};
                getMiModelo().addRow(datos);
                GUIReproductor.Habilitar(true);
            }
        }
        else {
            GUIReproductor.ldco.agrega(Direccion);
            Object[] datos = {Direccion.getNombre(), Direccion.getDireccion()};
            getMiModelo().addRow(datos);
            GUIReproductor.Habilitar(true);
        }
    }

    public static void BuscarIrreproducibles() {
        for (int i = 0; i < getMiTabla().getRowCount(); ++i) {
            String cadarchivo = getMiTabla().getValueAt(i, 1).toString();
            try {
                Libreria.loadFile(cadarchivo);
            }
            catch (ReproductorExcepcion ex) {
                NodoDoble auxiliar = GUIReproductor.ldco.busca(new File(cadarchivo));
                if (auxiliar != null) {
                    GUIReproductor.ldco.elimina(auxiliar);
                    eliminados++;
                }
            }
        }
        ActualizaTabla();
    }

    public static void inicializaTabla() {
        // obtiene numero de filas de la tabla
        int filas = getMiTabla().getRowCount();
        // remueve todas las filas de la tabla
        for (int fila = 0; fila < filas; fila++) {
            getMiModelo().removeRow(0);
        }
    }

    public void LlenarTabla(File[] Elementos) {
        GUIReproductor.EliminarElegido.setEnabled(true);
        GUIReproductor.EliminarTodo.setEnabled(true);
        GUIReproductor.GuardarLista.setEnabled(true);
        int tamaño = Elementos.length;
        for (int t = 0; t < tamaño; t++) {
            if (Elementos[t].isFile())//Verificar que es un archivo y no una carpeta
            {
                if (Elementos[t].getName().contains(".mp3") || Elementos[t].getName().contains(".ogg") || Elementos[t].getName().contains(".wav") || Elementos[t].getName().contains(".flac")) {//Filtrando archivos a agregar
                    String nombre = Elementos[t].getName();
                    Enviar(nombre, Elementos[t]);
                }
            }
            else {
                llamar(Elementos[t]);
                //System.out.println(Elementos[t].getName());
            }

        }
    }

    public File[] llamar(File Dir) {
        File[] lista_Archivos = Dir.listFiles();
        LlenarTabla(lista_Archivos);
        return lista_Archivos;
    }

    public static void ActualizaTabla() {
        inicializaTabla();
        NodoDoble auxiliar;
        auxiliar = GUIReproductor.ldco.getInicio();
        while (auxiliar != null) {
            Direcciones dir = auxiliar.getNodo();
            Object[] datos = {dir.getNombre(), dir.getDireccion()};
            getMiModelo().addRow(datos);
            //retrocede al nodo anterior
            auxiliar = auxiliar.getApuntSgte();
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTable Tabla;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void Reproduce(Object rutaTabla) {
        int filas = getMiTabla().getRowCount();
        for (int h = 0; h < filas; h++) {
            if (rutaTabla.toString().equals(getMiTabla().getValueAt(h, 1).toString())) {
                abc.metodos_internos.Reproducir(h);
                getMiTabla().changeSelection(h, 1, false, false);
            }
        }
    }
}
